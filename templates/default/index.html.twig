{% extends 'base.html.twig' %}

{% block title %}Hello DefaultController!
{% endblock %}

{% block body %}
	<div
		class="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4">
		<!-- Form -->
		<form class="bg-gray-800 p-8 rounded-xl shadow-lg w-full max-w-md transform transition-all duration-500 hover:scale-105">
			<input type="text" placeholder="Entrer la ville" class="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 text-white placeholder-gray-400">
			<button type="submit" class="w-full mt-6 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-all duration-300 transform hover:scale-105">
				Obtenir la météo
			</button>
		</form>

		<!-- Weather Card -->
		<div class="mt-8 bg-gray-800 p-8 rounded-xl shadow-lg w-full max-w-md hidden transform transition-all duration-500 hover:scale-105" id="weatherCard"></div>

		<!-- Graph Container -->
		<div class="mt-8 w-full max-w-3xl hidden" id="chartContainer">
			<canvas id="weatherChart"></canvas>
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		const weatherForm = document.querySelector("form");
const cityInput = document.querySelector("input");
const weatherCard = document.getElementById("weatherCard");
const chartContainer = document.getElementById("chartContainer");
const weatherChartCanvas = document.getElementById("weatherChart");

const apiKey = "f5f93bc25d2542a76e41a07320ea6c41";
let weatherChart = null; // Variable to store the Chart instance

weatherForm.addEventListener("submit", async (event) => {
event.preventDefault();
const city = cityInput.value;

if (city) {
try {
const weatherData = await getWeatherData(city);
displayWeatherInfo(weatherData);
displayWeatherChart(weatherData); // Display the graph
} catch (error) {
console.error(error);
displayError(error.message);
}
} else {
displayError("Veuillez entrer une ville !");
}
});

async function getWeatherData(city) {
const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`;
const response = await fetch(apiUrl);

if (! response.ok) {
throw new Error("Impossible de récupérer les données météo");
}

const data = await response.json();
console.log("API Response:", data); // Debugging
return data;
}

function displayWeatherInfo(data) {
const city = data.city.name; // Get city name from the forecast response
const firstForecast = data.list[0]; // Use the first forecast for current weather

if (! firstForecast || ! firstForecast.main || ! firstForecast.weather) {
throw new Error("Données météo invalides");
}

const {temp, humidity} = firstForecast.main;
const {description} = firstForecast.weather[0];

weatherCard.textContent = "";
weatherCard.classList.remove("hidden");
weatherCard.classList.add("flex", "flex-col", "space-y-6", "animate-fadeIn");

const cityDisplay = document.createElement("h1");
const tempDisplay = document.createElement("p");
const humidityDisplay = document.createElement("p");
const descDisplay = document.createElement("p");

cityDisplay.textContent = city;
cityDisplay.classList.add("text-3xl", "font-bold", "text-white", "animate-slideInDown");

tempDisplay.textContent = `${
(temp - 273.15).toFixed(1)
}°C`;
tempDisplay.classList.add("text-xl", "text-gray-300", "animate-slideInLeft");

humidityDisplay.textContent = `Humidité : ${humidity}%`;
humidityDisplay.classList.add("text-xl", "text-gray-300", "animate-slideInRight");

descDisplay.textContent = description;
descDisplay.classList.add("text-xl", "text-gray-300", "animate-slideInUp");

weatherCard.appendChild(cityDisplay);
weatherCard.appendChild(tempDisplay);
weatherCard.appendChild(humidityDisplay);
weatherCard.appendChild(descDisplay);

// Display weekly forecast
displayWeeklyForecast(data);
}

function displayWeeklyForecast(data) {
const forecastContainer = document.createElement("div");
forecastContainer.classList.add("space-y-6");

// Group forecast data by day
const dailyForecast = {};
data.list.forEach((item) => {
const date = new Date(item.dt * 1000).toLocaleDateString("fr-FR", {weekday: "long"});
if (! dailyForecast[date]) {
dailyForecast[date] = {
temp_min: item.main.temp_min,
temp_max: item.main.temp_max,
description: item.weather[0].description,
icon: item.weather[0].icon
};
} else { // Update min and max temperatures for the day
if (item.main.temp_min<dailyForecast[date].temp_min) {
                        dailyForecast[date].temp_min = item.main.temp_min;
                    }
                    if (item.main.temp_max>dailyForecast[date].temp_max) {
dailyForecast[date].temp_max = item.main.temp_max;
}
}
});

// Display the forecast for each day
Object.keys(dailyForecast).forEach((day) => {
const dayForecast = dailyForecast[day];
const forecastCard = document.createElement("div");
forecastCard.classList.add("bg-gray-700", "p-6", "rounded-lg", "shadow-md", "transform", "transition-all", "duration-300", "hover:scale-105");

const dayDisplay = document.createElement("p");
dayDisplay.textContent = day;
dayDisplay.classList.add("text-2xl", "font-semibold", "text-white", "animate-slideInDown");

const tempDisplay = document.createElement("p");
tempDisplay.textContent = `Min: ${
(dayForecast.temp_min - 273.15).toFixed(1)
}°C / Max: ${
(dayForecast.temp_max - 273.15).toFixed(1)
}°C`;
tempDisplay.classList.add("text-xl", "text-gray-300", "animate-slideInLeft");

const descDisplay = document.createElement("p");
descDisplay.textContent = dayForecast.description;
descDisplay.classList.add("text-xl", "text-gray-300", "animate-slideInRight");

const iconDisplay = document.createElement("img");
iconDisplay.src = `https://openweathermap.org/img/wn/${
dayForecast.icon
}.png`;
iconDisplay.alt = dayForecast.description;
iconDisplay.classList.add("w-12", "h-12", "animate-spin");

forecastCard.appendChild(dayDisplay);
forecastCard.appendChild(tempDisplay);
forecastCard.appendChild(descDisplay);
forecastCard.appendChild(iconDisplay);
forecastContainer.appendChild(forecastCard);
});

weatherCard.appendChild(forecastContainer);
}

function displayWeatherChart(data) { // Extract time and temperature data from the API response
const labels = data.list.map(item => new Date(item.dt * 1000).toLocaleTimeString("fr-FR", {
hour: "2-digit",
minute: "2-digit"
}));
const temperatures = data.list.map(item => (item.main.temp - 273.15).toFixed(1));

// Destroy the previous chart instance if it exists
if (weatherChart) {
weatherChart.destroy();
}

// Show the chart container
chartContainer.classList.remove("hidden");
chartContainer.classList.add("animate-fadeIn");

// Create the chart
weatherChart = new Chart(weatherChartCanvas, {
type: "line",
data: {
labels: labels,
datasets: [
{
label: "Température (°C)",
data: temperatures,
borderColor: "rgba(75, 192, 192, 1)",
backgroundColor: "rgba(75, 192, 192, 0.2)",
fill: true,
tension: 0.4
}
]
},
options: {
scales: {
y: {
beginAtZero: false,
title: {
display: true,
text: "Température (°C)"
}
},
x: {
title: {
display: true,
text: "Heure"
}
}
},
responsive: true,
maintainAspectRatio: false
}
});
}

function displayError(message) {
const errorDisplay = document.createElement("p");
errorDisplay.textContent = message;
errorDisplay.classList.add("text-red-500", "text-xl", "font-semibold", "animate-bounce");

weatherCard.textContent = "";
weatherCard.classList.remove("hidden");
weatherCard.appendChild(errorDisplay);
}
	</script>
{% endblock %}
